---
basePath: /v2
definitions:
  controllers.CustomResponse:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      data:
        items:
          type: string
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  controllers.OtherData:
    properties:
      POA:
        description: POA value
        example: 2
        type: integer
      userCode:
        description: User code
        example: NXAAE
        type: string
    type: object
  controllers.UpdateTagsRequest:
    properties:
      tag_ids:
        description: Array of TagIds that have to be modified
        example:
          - 1
          - 2
          - 3
        items:
          type: integer
        type: array
    required:
      - tag_ids
    type: object
  controllers.UserData:
    properties:
      access_token:
        description: Access token of the user
        example: eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJleHAi.......
        type: string
      email:
        description: Email address
        example: JOHN.DOE@GMAIL.COM
        type: string
      exchanges:
        description: List of exchanges
        example:
          - NSE_EQ
          - NSE_FO
          - MCX_FO
          - NSE_CUR
        items:
          type: string
        type: array
      login_time:
        description: Login time
        example: 2023-Mar-29 13:10:50
        type: string
      mobile:
        description: Mobile number
        example: "9999999999"
        type: string
      others:
        allOf:
          - $ref: "#/definitions/controllers.OtherData"
        description: Other data
      product_types:
        description: List of product types
        example:
          - INTRADAY
          - DELIVERY
          - MTF
        items:
          type: string
        type: array
      tradingActive:
        description: Trading active status
        example: true
        type: boolean
      user_id:
        description: User ID
        example: XX9999
        type: string
      user_name:
        description: User name
        example: JOHN DOE
        type: string
    type: object
  controllers.UserLoginRequest:
    properties:
      application_id:
        description: Application ID of the application
        example: DEMOUSER
        type: string
      client_code:
        description: Client code of the user
        example: DEMOUSER
        type: string
      password:
        description: Password of the user
        example: DEMOUSER
        type: string
      totp:
        description: TOTP of the user
        example: DEMOUSER
        type: string
    required:
      - application_id
      - client_code
      - password
      - totp
    type: object
  controllers.UserLoginResponse:
    properties:
      data:
        allOf:
          - $ref: "#/definitions/controllers.UserData"
        description: User data
      status:
        description: Status of the response
        example: success
        type: string
    type: object
  controllers.UserProfileObj:
    properties:
      client_code:
        type: string
      email:
        type: string
      mobile:
        type: string
      name:
        type: string
      pan:
        type: string
    type: object
  controllers.UserProfileResponse:
    properties:
      profile:
        $ref: "#/definitions/controllers.UserProfileObj"
    type: object
  controllers.edisUrlPayload:
    properties:
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: Exchange represents the exchange from which the request was made
        example: NSE_FO
      product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: Product represents the financial instrument/product for the order.
          MTF product can only be used in NSE_EQ exchange.
        example: INTRADAY
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      token:
        description: Security token of the scrip. It can be found in the scripmaster file.
        example: 12345
        type: integer
    required:
      - exchange
      - product
      - quantity
      - token
    type: object
  types.CancelAllRegularOrdersRequest:
    properties:
      order_ids:
        description: String of order ids that have to be cancelled
        example:
          - OYP1234
          - OYP13441
        items:
          type: string
        type: array
    required:
      - order_ids
    type: object
  types.ConvertPositionRequest:
    properties:
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: Exchange represents the type of exchange where the order will be
          placed.
        example: NSE_FO
      new_product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: Product represents the financial instrument/product for the order.
          MTF product can only be used in NSE_EQ exchange.
        example: DELIVERY
      old_product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: Product represents the financial instrument/product for the order.
          MTF product can only be used in NSE_EQ exchange.
        example: INTRADAY
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      token:
        description: Security token of the scrip. It can be found in the scripmaster file.
        example: 12345
        type: integer
      transaction_type:
        allOf:
          - $ref: "#/definitions/types.TransactionTypes"
        description: TransactionType specifies the type of transaction for the order.
        example: BUY
    required:
      - exchange
      - new_product
      - old_product
      - quantity
      - token
      - transaction_type
    type: object
  types.CoverModifyOrderRequest:
    properties:
      price:
        description: Price is the new price per unit of the product.
        type: number
      quantity:
        description: Quantity is the number of units of the product to be modified.
        example: 100
        type: integer
      stoploss:
        allOf:
          - $ref: "#/definitions/types.CoverStoplossLeg"
        description: CoverStopLoss is the stop-loss leg details for the cover order.
      tag_ids:
        description: TagIds represent any tags associated with the order.
        example:
          - 1
          - 2
          - 3
        items:
          type: integer
        type: array
      traded_quantity:
        description: TradedQuantity is the number of units of the product already
          traded.You must pass the latest value here as received in the
          orderbook. If for example you have placed an order for 100 quantity
          out of which 20 are already traded, and in the modify order object,
          you pass quantity as 100 and traded_quantity as 0, the order shall
          then become of total quanity 120 and traded_quantity 20.
        example: 50
        type: integer
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: Variety specifies the variety of order for execution.
        example: RL
    required:
      - quantity
      - stoploss
      - traded_quantity
      - variety
    type: object
  types.CoverModifySlOrderRequest:
    properties:
      tag_ids:
        items:
          type: integer
        type: array
      traded_quantity:
        type: integer
      trigger_price:
        type: number
    required:
      - traded_quantity
    type: object
  types.CoverPlaceOrderRequest:
    properties:
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: Exchange represents the type of exchange where the order will be
          placed.
        example: NSE_FO
      order_identifier:
        description: OrderIdentifier is a unique identifier assigned to the order.
        type: string
      price:
        description: Price is the price per unit of the product.
        type: number
      quantity:
        description: Quantity is the number of units of the product to be bought or sold.
        example: 100
        type: integer
      stoploss:
        allOf:
          - $ref: "#/definitions/types.CoverStoplossLeg"
        description: CoverStoploss is the stop-loss leg details for the cover order.
      tag_ids:
        description: TagIds represent any tags associated with the order.
        example:
          - 1
          - 2
          - 3
        items:
          type: integer
        type: array
      token:
        description: Security token of the scrip. It can be found in the scripmaster file.
        example: 12345
        type: integer
      transaction_type:
        allOf:
          - $ref: "#/definitions/types.TransactionTypes"
        description: TransactionType specifies the type of transaction for the order.
        example: BUY
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: Variety specifies the variety of order for execution.
        example: RL
    required:
      - exchange
      - quantity
      - stoploss
      - token
      - transaction_type
      - variety
    type: object
  types.CoverStoplossLeg:
    properties:
      trigger_price:
        type: number
    required:
      - trigger_price
    type: object
  types.EdisSummaryPayload:
    properties:
      product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: Product represents the financial instrument/product for the order.
          MTF product can only be used in NSE_EQ exchange.
        example: INTRADAY
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      token:
        description: Security token of the scrip. It can be found in the scripmaster file.
        example: 12345
        type: integer
    required:
      - product
      - quantity
      - token
    type: object
  types.EdisSummaryResponse:
    properties:
      approved_free_quantity:
        type: integer
      isin:
        type: string
      name:
        type: string
      quantity_to_hold:
        type: integer
      settlement_type:
        type: integer
      todays_free_quantity:
        type: integer
      total_free_quantity:
        type: integer
    type: object
  types.ExchangeDetail:
    properties:
      exchange:
        $ref: "#/definitions/types.ExchangeTypes"
      symbol:
        type: string
      token:
        type: integer
    type: object
  types.ExchangeFundResponse:
    properties:
      booked_profit:
        type: number
      collateral:
        type: number
      credit_for_sale:
        type: number
      deposit:
        type: number
      funds_transferred:
        type: number
      funds_withdrawn:
        type: number
      limit_utilization:
        type: number
      mtm_and_booked_loss:
        type: number
      net_available:
        type: number
      option_credit_for_sale:
        type: number
      total_trading_power:
        type: number
      total_utilization:
        type: number
      withdrawable_balance:
        type: number
    type: object
  types.ExchangeTypes:
    enum:
      - NSE_FO
      - NSE_EQ
      - NSE_CUR
      - NSE_CUR_SPOT
      - MCX_FO
      - MCX_FO_SPOT
    type: string
    x-enum-varnames:
      - ExchangeTypesNSEFO
      - ExchangeTypesNSEEQUITY
      - ExchangeTypesNSECURRENCY
      - ExchangeTypesNSECURRENCYSpot
      - ExchangeTypesMCX
      - ExchangeTypesMCXSpot
  types.FundResponse:
    properties:
      mcx:
        $ref: "#/definitions/types.ExchangeFundResponse"
      nse:
        $ref: "#/definitions/types.ExchangeFundResponse"
    type: object
  types.FundWithdrawalCancelRequest:
    properties:
      amount:
        description: Amount is the amount of money involved in the withdrawal
          transaction to be canceled
        example: 5000
        type: number
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: Exchange represents the exchange from which the withdrawal request
          was made
        example: NSE_FO
      transaction_id:
        description: TransactionId is the unique identifier of the withdrawal
          transaction to be canceled
        example: TXN123456
        type: string
    required:
      - amount
      - exchange
      - transaction_id
    type: object
  types.FundWithdrawalItem:
    properties:
      amount:
        type: number
      created_at:
        type: string
      exchange:
        $ref: "#/definitions/types.ExchangeTypes"
      status:
        type: string
      transaction_id:
        type: string
    type: object
  types.FundWithdrawalListResponse:
    properties:
      data:
        items:
          $ref: "#/definitions/types.FundWithdrawalItem"
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  types.FundWithdrawalRequest:
    properties:
      amount:
        description: Amount is the amount of money to be withdrawn
        example: 5000
        type: number
      bank_account_number:
        description: BankAccountNumber is the account number where the funds will be
          withdrawn to
        example: "123456789012"
        type: string
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: Exchange represents the exchange from which funds are being withdrawn
        example: NSE_FO
      ifsc:
        description: IFSC is the Indian Financial System Code of the bank where the
          account is held
        example: SBIN0001234
        type: string
    required:
      - amount
      - bank_account_number
      - exchange
      - ifsc
    type: object
  types.FundWithdrawalResponse:
    properties:
      message:
        type: string
      status:
        type: string
      transaction_id:
        type: string
    type: object
  types.GttOrderResponse:
    properties:
      exchange:
        $ref: "#/definitions/types.ExchangeTypes"
      expiry_date:
        type: string
      id:
        type: string
      instrument_name:
        $ref: "#/definitions/types.InstrumentName"
      lot_size:
        type: integer
      market_segment_id:
        $ref: "#/definitions/types.MarketSegmentId"
      option_type:
        $ref: "#/definitions/types.OptionType"
      orders:
        items:
          $ref: "#/definitions/types.GttOrderResponseOrders"
        type: array
      parent_middleware_id:
        type: integer
      product:
        $ref: "#/definitions/types.ProductTypes"
      series:
        type: string
      strike_price:
        type: number
      symbol:
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      token:
        type: integer
      transaction_type:
        $ref: "#/definitions/types.TransactionTypes"
      trigger_type:
        $ref: "#/definitions/types.GttTriggerType"
    required:
      - exchange
      - expiry_date
      - instrument_name
      - lot_size
      - market_segment_id
      - option_type
      - orders
      - series
      - strike_price
      - symbol
      - token
      - transaction_type
      - trigger_type
    type: object
  types.GttOrderResponseOrders:
    properties:
      created_at:
        type: string
      error_reason:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
      status:
        $ref: "#/definitions/types.GttOrderStatus"
      transaction_type:
        $ref: "#/definitions/types.TransactionTypes"
      trigerred_at:
        type: string
      trigger_price:
        type: number
      updated_at:
        type: string
      variety:
        $ref: "#/definitions/types.VarietyTypes"
    type: object
  types.GttOrderStatus:
    enum:
      - triggered
      - active
      - cancelled
      - expired
      - completed
      - middleware_pending
      - middleware_rejected
    type: string
    x-enum-varnames:
      - GttOrderStatusTriggered
      - GttOrderStatusActive
      - GttOrderStatusCancelled
      - GttOrderStatusExpired
      - GttOrderStatusCompleted
      - GttOrderStatusMiddlewarePending
      - GttOrderStatusMiddlewareRejected
  types.GttOrderbookResponse:
    properties:
      data:
        items:
          $ref: "#/definitions/types.GttOrderResponse"
        type: array
      status:
        type: string
    type: object
  types.GttTriggerType:
    enum:
      - single
      - oco
    type: string
    x-enum-varnames:
      - GttTriggerTypeSingle
      - GttTriggerTypeOCO
  types.Holding:
    properties:
      average_price:
        type: number
      bse:
        $ref: "#/definitions/types.ExchangeDetail"
      collateral_quantity:
        type: integer
      collateral_value:
        type: number
      dp_free:
        type: integer
      isin:
        type: string
      last_price:
        type: number
      nse:
        $ref: "#/definitions/types.ExchangeDetail"
      pool_free:
        type: integer
      product:
        type: string
      t1_quantity:
        type: integer
      total_free:
        type: integer
    type: object
  types.HoldingsResponse:
    properties:
      data:
        items:
          $ref: "#/definitions/types.Holding"
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  types.IcebergOrderData:
    properties:
      first_order_id:
        type: string
      iceberg_order_id:
        type: string
      modified_order_id:
        type: string
    type: object
  types.IcebergOrderResponse:
    properties:
      code:
        type: string
      data:
        $ref: "#/definitions/types.IcebergOrderData"
      message:
        type: string
      status:
        type: string
    type: object
  types.IcebergPlaceOrderRequest:
    properties:
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: 'Exchange represents the type of exchange where the order will be
          placed. Example: "NSE_FO", "NSE_EQ".'
        example: NSE_FO
      legs:
        description: >-
          ValidityDays      int                                `json:"validity_days"`

          IsAMO bool `json:"is_amo"`

          Gtt *struct {
          	SlTriggerPercent     *float64 `json:"sl_trigger_percent"`
          	ProfitTriggerPercent *float64 `json:"profit_trigger_percent"`
          } `json:"gtt"`
        example: 6
        type: integer
      order_identifier:
        description: OrderIdentifier is a unique identifier assigned to the order.
        example: ORD123
        type: string
      price:
        description: Price is the price per unit of the product. Price should be an
          integer multiple of Tick Size. For example, IDEA's tick size is 0.05.
          So the price entered can be 9.5 or 9.65. It cannot be 9.67. In case of
          market orders, you should send the Last Trade Price as 0.
        example: 50.25
        type: number
      product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: 'Product represents the financial instrument/product for the order.
          MTF product can only be used in NSE_EQ exchange. Example: "INTRADAY",
          "DELIVERY", etc.'
        example: INTRADAY
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      tag_ids:
        description: TagIds represent any tags associated with the order.
        example:
          - 1
          - 2
          - 3
        items:
          type: integer
        type: array
      token:
        description: Security token of the scrip. It can be found in the scripmaster file.
        example: 12345
        type: integer
      transaction_type:
        allOf:
          - $ref: "#/definitions/types.TransactionTypes"
        description: 'TransactionType specifies the type of transaction for the order.
          Example: "BUY", "SELL".'
        example: BUY
      trigger_price:
        description: TriggerPrice is the price at which the order becomes active.
        example: 52
        type: number
      validity:
        allOf:
          - $ref: "#/definitions/types.ValidityTypes"
        description: DisclosedQuantity
          int                                `json:"disclosed_quantity"`
        example: DAY
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: 'Variety specifies the variety of order for execution. Possible
          values: ["RL", "RL-MKT", "SL", "SL-MKT"].  RL means regular orders, SL
          means Stop Loss order. MKT means that the trade will happen at market
          price.'
        example: RL
    required:
      - exchange
      - legs
      - price
      - product
      - quantity
      - token
      - transaction_type
      - validity
      - variety
    type: object
  types.InstrumentName:
    enum:
      - EQIDX
      - COM
      - EQUITIES
      - FUTCOM
      - FUTCUR
      - FUTIDX
      - FUTIRC
      - FUTIRT
      - FUTSTK
      - OPTCUR
      - OPTFUT
      - OPTIDX
      - OPTIRC
      - OPTSTK
      - UNDCUR
    type: string
    x-enum-varnames:
      - InstrumentNameEqIndex
      - InstrumentNameCom
      - InstrumentNameEquities
      - InstrumentNameCommodityFuture
      - InstrumentNameCurrencyFuture
      - InstrumentNameIndexFuture
      - InstrumentNameInterestFuture
      - InstrumentNameInterestFutureT
      - InstrumentNameStockFuture
      - InstrumentNameCurrencyOption
      - InstrumentNameCommodityOption
      - InstrumentNameIndexOption
      - InstrumentNameInterestOption
      - InstrumentNameStockOption
      - InstrumentNameCurrentcyUnderlying
  types.MarketSegmentId:
    enum:
      - 2
      - 1
      - 13
      - 14
      - 5
      - 6
    type: integer
    x-enum-varnames:
      - MarketSegmentIdNSEFO
      - MarketSegmentIdNSEEQUITY
      - MarketSegmentIdNSECURRENCY
      - MarketSegmentIdNSECURRENCYSpot
      - MarketSegmentIdMCX
      - MarketSegmentIdMCXSpot
  types.Metadata:
    properties:
      all_records:
        type: integer
      completed_records:
        type: integer
      open_records:
        type: integer
      total_records:
        type: integer
    type: object
  types.ModifyGttRequest:
    properties:
      id:
        description: ID Of the GTT order to be modified
        example: 12345
        type: integer
      price:
        description: Price is the price per unit of the product. Price should be an
          integer multiple of Tick Size. For example, IDEA's tick size is 0.05.
          So the price entered can be 9.5 or 9.65. It cannot be 9.67. In case of
          market orders, you should send the Last Trade Price as 0.
        example: 50.25
        type: number
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      trigger_price:
        description: TriggerPrice is the price at which the order becomes active.
        example: 52
        type: number
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: 'Variety specifies the variety of order for execution. Possible
          values: ["RL", "RL-MKT", "SL", "SL-MKT"].  RL means regular orders, SL
          means Stop Loss order. MKT means that the trade will happen at market
          price.'
        example: RL
    required:
      - id
    type: object
  types.ModifyIcebergOrder:
    properties:
      price:
        description: Price is the price per unit of the product. Price should be an
          integer multiple of Tick Size. For example, IDEA's tick size is 0.05.
          So the price entered can be 9.5 or 9.65. It cannot be 9.67. In case of
          market orders, you should send the Last Trade Price as 0.
        example: 50.25
        type: number
      traded_quantity:
        description: TradedQuantity is the number of units of the product already
          traded. You must pass the latest value here as received in the
          orderbook. If for example you have placed an order for 100 quantity
          out of which 20 are already traded, and in the modify order object,
          you pass quantity as 100 and traded_quantity as 0, the order shall
          then become of total quanity 120 and traded_quantity 20.
        example: 50
        type: integer
      trigger_price:
        description: TriggerPrice is the price at which the order becomes active.
        example: 52
        type: number
    required:
      - price
      - traded_quantity
    type: object
  types.ModifyRegularOrderRequest:
    properties:
      disclosed_quantity:
        description: DisclosedQuantity is the new portion of the order quantity
          disclosed to the market. Can be any number lesser than or equal to
          quantity, including 0.
        example: 50
        type: integer
      price:
        description: Price is the new price per unit of the product.
        example: 50.25
        type: number
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      tag_ids:
        description: TagIds represent any new tags associated with the order.
        example:
          - 1
          - 2
          - 3
        items:
          type: integer
        type: array
      traded_quantity:
        description: TradedQuantity is the number of units of the product already
          traded. You must pass the latest value here as received in the
          orderbook. If for example you have placed an order for 100 quantity
          out of which 20 are already traded, and in the modify order object,
          you pass quantity as 100 and traded_quantity as 0, the order shall
          then become of total quanity 120 and traded_quantity 20.
        example: 50
        type: integer
      trigger_price:
        description: TriggerPrice is the new price at which the order is to be triggered.
        example: 52
        type: number
      validity:
        allOf:
          - $ref: "#/definitions/types.ValidityTypes"
        description: Validity specifies the new duration for which the order remains valid.
        example: DAY
      validity_days:
        description: ValidityDays specifies the new number of days the order remains valid.
        example: 7
        type: integer
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: Variety specifies the variety of order for execution.
        example: RL
    required:
      - price
      - quantity
      - traded_quantity
      - validity
      - variety
    type: object
  types.MultipleOrderResponse:
    properties:
      data:
        items:
          $ref: "#/definitions/types.PlaceOrderResponse"
        type: array
      status:
        type: string
    type: object
  types.NetDayPositions:
    properties:
      day:
        items:
          $ref: "#/definitions/types.PositionItem"
        type: array
      net:
        items:
          $ref: "#/definitions/types.PositionItem"
        type: array
    type: object
  types.OptionType:
    enum:
      - CE
      - PE
    type: string
    x-enum-varnames:
      - OptionTypeCall
      - OptionTypePut
  types.Order:
    properties:
      disclosed_quantity:
        type: integer
      disclosed_quantity_remaining:
        type: integer
      error_reason:
        type: string
      exchange:
        $ref: "#/definitions/types.ExchangeTypes"
      exchange_timestamp:
        type: string
      expiry_date:
        type: string
      gtt:
        $ref: "#/definitions/types.OrderBookGttInfo"
      iceberg:
        $ref: "#/definitions/types.OrderBookIcebergInfo"
      initiated_by:
        type: string
      instrument_name:
        $ref: "#/definitions/types.InstrumentName"
      is_amo:
        type: boolean
      lot_size:
        type: integer
      middleware_order_id:
        type: integer
      modified_by:
        type: string
      option_type:
        $ref: "#/definitions/types.OptionType"
      order_created_at:
        type: string
      order_id:
        type: string
      order_identifier:
        type: string
      order_number:
        type: string
      order_price:
        type: number
      pending_quantity:
        type: integer
      product:
        $ref: "#/definitions/types.ProductTypes"
      series:
        type: string
      status:
        $ref: "#/definitions/types.OrderStatus"
      strike_price:
        type: number
      symbol:
        type: string
      tags_ids:
        items:
          type: integer
        type: array
      token:
        type: integer
      total_quantity:
        type: integer
      traded_price:
        type: number
      traded_quantity:
        type: integer
      transaction_type:
        $ref: "#/definitions/types.TransactionTypes"
      trigger_price:
        type: number
      validity:
        $ref: "#/definitions/types.ValidityTypes"
      variety:
        $ref: "#/definitions/types.VarietyTypes"
    type: object
  types.OrderBookGttInfo:
    properties:
      profit_trigger_percent:
        type: number
      profit_variety:
        $ref: "#/definitions/types.VarietyTypes"
      sl_trigger_percent:
        type: number
      sl_variety:
        $ref: "#/definitions/types.VarietyTypes"
      trigger_type:
        $ref: "#/definitions/types.GttTriggerType"
    type: object
  types.OrderBookIcebergInfo:
    properties:
      iceberg_order_id:
        type: string
      iceberg_sequence:
        type: integer
      legs:
        type: integer
    type: object
  types.OrderBookResponse:
    properties:
      metadata:
        $ref: "#/definitions/types.Metadata"
      orders:
        items:
          $ref: "#/definitions/types.Order"
        type: array
      status:
        type: string
    type: object
  types.OrderData:
    properties:
      order_id:
        type: string
    type: object
  types.OrderStatus:
    enum:
      - PENDING
      - middleware_pending
      - middleware_rejected
      - REJECTED
      - CANCELLED
      - COMPLETED
    type: string
    x-enum-varnames:
      - OrderStatusPending
      - OrderStausMiddlewarePending
      - OrderStatusMiddlewareRejected
      - OrderStatusRejected
      - OrderStatusCancelled
      - OrderStatusCompleted
  types.PlaceGttLegRequest:
    properties:
      price:
        description: Price is the price per unit of the product.
        example: 50.25
        type: number
      product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: ProductType represents the financial instrument/product for the order.
        example: INTRADAY
      quantity:
        description: Quantity is the number of units of the product to be bought or sold.
        example: 100
        type: integer
      trigger_price:
        description: TriggerPrice is the price at which the order becomes active.
        example: 52
        type: number
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: Variety specifies the variety of order for execution.
        example: RL
    required:
      - quantity
      - trigger_price
    type: object
  types.PlaceGttRequest:
    properties:
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: Exchange represents the type of exchange where the order will be
          placed.
        example: NSE_FO
      gtt_trigger_type:
        allOf:
          - $ref: "#/definitions/types.GttTriggerType"
        description: This indicates the type of GTT, which can be "single" or "oco"
        example: single
      order_identifier:
        description: OrderIdentifier is a unique identifier assigned to the order.
        example: ORD123
        type: string
      price:
        description: Price is the price per unit of the product. Price should be an
          integer multiple of Tick Size. For example, IDEA's tick size is 0.05.
          So the price entered can be 9.5 or 9.65. It cannot be 9.67. In case of
          market orders, you should send the Last Trade Price as 0.
        example: 50.25
        type: number
      product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: Product represents the financial instrument/product for the order.
          MTF product can only be used in NSE_EQ exchange.
        example: INTRADAY
      profit:
        allOf:
          - $ref: "#/definitions/types.PlaceGttLegRequest"
        description: Profit represents the profit leg of the GTT order. It is an
          optional field if it is single and you want to set profit.
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      stoploss:
        allOf:
          - $ref: "#/definitions/types.PlaceGttLegRequest"
        description: Stoploss represents the stop loss leg of the GTT order. It is an
          optional field if it is single and you want to set stoploss.
      tag_ids:
        description: TagIds represent any tags associated with the order.
        example:
          - 1
          - 2
          - 3
        items:
          type: integer
        type: array
      token:
        description: Security token of the scrip. It can be found in the scripmaster file.
        example: 12345
        type: integer
      transaction_type:
        allOf:
          - $ref: "#/definitions/types.TransactionTypes"
        description: TransactionType specifies the type of transaction for the order.
        example: BUY
      trigger_price:
        description: TriggerPrice is the price at which the order becomes active.
        example: 52
        type: number
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: 'Variety specifies the variety of order for execution. Possible
          values: ["RL", "RL-MKT", "SL", "SL-MKT"].  RL means regular orders, SL
          means Stop Loss order. MKT means that the trade will happen at market
          price.'
        example: RL
    required:
      - exchange
      - gtt_trigger_type
      - product
      - token
      - transaction_type
    type: object
  types.PlaceOrderResponse:
    properties:
      code:
        type: string
      data:
        allOf:
          - $ref: "#/definitions/types.OrderData"
        description: Order ID of the order placed
      message:
        description: Message based on the type of response
        example: GTT Order Modified / Order Placed
        type: string
      status:
        description: Success or Error based on the response
        type: string
      url:
        type: string
    type: object
  types.PositionItem:
    properties:
      average_price:
        type: number
      buy_price:
        type: number
      buy_quantity:
        type: integer
      buy_value:
        type: number
      exchange:
        $ref: "#/definitions/types.ExchangeTypes"
      expiry_date:
        type: string
      lot_size:
        type: integer
      multiplier:
        type: number
      option_type:
        $ref: "#/definitions/types.OptionType"
      overnight_average_price:
        type: number
      overnight_buy_value:
        type: number
      overnight_sell_value:
        type: number
      product:
        $ref: "#/definitions/types.ProductTypes"
      quantity:
        type: integer
      sell_price:
        type: number
      sell_quantity:
        type: integer
      sell_value:
        type: number
      strike_price:
        type: number
      symbol:
        type: string
      token:
        type: integer
      value:
        type: number
    type: object
  types.PositionResponse:
    properties:
      data:
        $ref: "#/definitions/types.NetDayPositions"
      status:
        type: string
    type: object
  types.ProductTypes:
    enum:
      - INTRADAY
      - DELIVERY
      - MTF
      - COVER
      - BTST
      - OFS
    type: string
    x-enum-varnames:
      - ProductTypesIntraday
      - ProductTypesDelivery
      - ProductTypesMTF
      - ProductTypesCover
      - ProductTypesBTST
      - ProductTypesOFS
  types.RegularPlaceOrderRequest:
    properties:
      disclosed_quantity:
        description: DisclosedQuantity is the portion of the order quantity disclosed to
          the market. Can be any number lesser than or equal to quantity,
          including 0.
        example: 50
        type: integer
      exchange:
        allOf:
          - $ref: "#/definitions/types.ExchangeTypes"
        description: 'Exchange represents the type of exchange where the order will be
          placed. Example: "NSE_FO", "NSE_EQ".'
        example: NSE_FO
      gtt:
        properties:
          profit_trigger_percent:
            description: "ProfitTriggerPercent is the profit trigger percentage. Example:
              10.0 (if the profit trigger is set to 10%)."
            example: 10
            type: number
          profit_variety:
            allOf:
              - $ref: "#/definitions/types.VarietyTypes"
            description: ProfitVariety specifies the variety of profit order.
            example: RL
          sl_trigger_percent:
            description: "SlTriggerPercent is the stop-loss trigger percentage. Example: 5.0
              (if the stop-loss trigger is set to 5%)."
            example: 5
            type: number
          sl_variety:
            allOf:
              - $ref: "#/definitions/types.VarietyTypes"
            description: SlVariety specifies the variety of stop-loss order.
            example: RL-MKT
        type: object
      is_amo:
        description: "Possible values: [true,false]. Should be set to true if order is
          being placed after market hours"
        example: true
        type: boolean
      order_identifier:
        description: OrderIdentifier is a unique identifier assigned to the order.
        example: ORD123
        type: string
      price:
        description: Price is the price per unit of the product. Price should be an
          integer multiple of Tick Size. For example, IDEA's tick size is 0.05.
          So the price entered can be 9.5 or 9.65. It cannot be 9.67. In case of
          market orders, you should send the Last Trade Price as 0.
        example: 50.25
        type: number
      product:
        allOf:
          - $ref: "#/definitions/types.ProductTypes"
        description: 'Product represents the financial instrument/product for the order.
          MTF product can only be used in NSE_EQ exchange. Example: "INTRADAY",
          "DELIVERY", etc.'
        example: INTRADAY
      quantity:
        description: Quantity is the number of units of the product to be bought or
          sold. For exchange NSE_FO, if you want to trade in 2 lots and lot size
          is 50, you should pass 100. In all other exchanges, you should pass
          just the number of lots. For example, in MCX_FO, if you want to trade
          5 lots, you should pass just 5.
        example: 100
        type: integer
      tag_ids:
        description: TagIds represent any tags associated with the order.
        example:
          - 1
          - 2
          - 3
        items:
          type: integer
        type: array
      token:
        description: "Security token of the scrip. It can be found in the scripmaster
          file. Example: 12345."
        example: 12345
        type: integer
      transaction_type:
        allOf:
          - $ref: "#/definitions/types.TransactionTypes"
        description: 'TransactionType specifies the type of transaction for the order.
          Example: "BUY", "SELL".'
        example: BUY
      trigger_price:
        description: TriggerPrice is the price at which the order becomes active.
        example: 52
        type: number
      validity:
        allOf:
          - $ref: "#/definitions/types.ValidityTypes"
        description: 'Validity specifies the duration for which the order remains valid.
          Example: "DAY", "IOC" (Immediate or Cancel), "AMO" (After MArket
          Order).'
        example: DAY
      validity_days:
        description: ValidityDays specifies the number of days the order remains valid.
        example: 7
        type: integer
      variety:
        allOf:
          - $ref: "#/definitions/types.VarietyTypes"
        description: 'Variety specifies the variety of order for execution. Possible
          values: ["RL", "RL-MKT", "SL", "SL-MKT"].  RL means regular orders, SL
          means Stop Loss order. MKT means that the trade will happen at market
          price.'
        example: RL
    required:
      - exchange
      - price
      - product
      - quantity
      - token
      - transaction_type
      - validity
      - variety
    type: object
  types.Trade:
    properties:
      order_id:
        type: string
      trade_no:
        type: string
      trade_price:
        type: number
      trade_quantity:
        type: integer
      traded_at:
        type: string
    type: object
  types.TradeBookResponse:
    properties:
      status:
        type: string
      trades:
        items:
          $ref: "#/definitions/types.Trade"
        type: array
    type: object
  types.TransactionTypes:
    enum:
      - BUY
      - SELL
    type: string
    x-enum-varnames:
      - TransactionTypesBUY
      - TransactionTypesSELL
  types.ValidityTypes:
    enum:
      - DAY
      - IOC
      - AMO
    type: string
    x-enum-varnames:
      - ValidityTypesFullDay
      - ValidityTypesImmediateOrCancel
      - ValidityTypesAfterMarket
  types.VarietyTypes:
    enum:
      - RL
      - RL-MKT
      - SL
      - SL-MKT
    type: string
    x-enum-varnames:
      - VarietyTypesRegularLimitOrder
      - VarietyTypesRegularMarketOrder
      - VarietyTypesStopLimitOrder
      - VarietyTypesStopMarketOrder
host: vortex-api.rupeezy.in
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/support
  description: This is a sample server for Vortex.
  termsOfService: http://example.com/terms/
  title: Vortex
  version: "2.0"
paths:
  /trading/edis/summary:
    post:
      consumes:
        - application/json
      description: Retrieves a summary of Electronic Delivery Instruction Slip (EDIS)
        for the given payload
      operationId: GetEdisSummary
      parameters:
        - description: EDIS summary request payload
          in: body
          name: payload
          required: true
          schema:
            $ref: "#/definitions/types.EdisSummaryPayload"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with EDIS summary details
          schema:
            $ref: "#/definitions/types.EdisSummaryResponse"
        "400":
          description: Invalid request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get EDIS Summary
      tags:
        - EDIS
  /trading/edis/url:
    post:
      consumes:
        - application/json
      description: Generates an Electronic Delivery Instruction Slip (EDIS) URL for
        the given payload
      operationId: GenerateEdisUrl
      parameters:
        - description: EDIS URL request payload
          in: body
          name: payload
          required: true
          schema:
            $ref: "#/definitions/controllers.edisUrlPayload"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with generated EDIS URL. The URL can be found
            within the data key of the response.
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Invalid request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Generate EDIS URL
      tags:
        - EDIS
  /trading/orders:
    get:
      consumes:
        - application/json
      description: Retrieves the order book including pending and completed orders
      operationId: GetOrderBook
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with order book details
          schema:
            $ref: "#/definitions/types.OrderBookResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get order book
      tags:
        - Order
  "/trading/orders/{orderId}":
    get:
      consumes:
        - application/json
      description: Fetches order history
      operationId: OrderHistory
      parameters:
        - description: Order Id to fetch order history for
          in: path
          name: orderId
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Successful order history fetch
          schema:
            $ref: "#/definitions/types.OrderBookResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Order History
      tags:
        - Order
  "/trading/orders/{orderId}/tags":
    put:
      consumes:
        - application/json
      description: Update tags for a placed order.
      operationId: UpdatePlacedOrderTags
      parameters:
        - description: Order ID of the order to be modified
          in: path
          name: orderId
          required: true
          type: string
        - description: JSON payload containing tag IDs
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/controllers.UpdateTagsRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Tags have been successfully updated
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "404":
          description: Order not found
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Update tags for an order
      tags:
        - Order
  /trading/orders/cover:
    post:
      consumes:
        - application/json
      description: Creates and places a cover order
      parameters:
        - description: Order Ids for orders to be cancelled
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.CoverPlaceOrderRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Response will contain a status of all the provided orders including
            if they were successfully cancelled.
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Please check the price provided
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Create cover order
      tags:
        - Order
  "/trading/orders/cover/{orderId}":
    post:
      consumes:
        - application/json
      description: Modifies a pending cover order
      parameters:
        - description: ID of the order to be modified
          in: path
          name: orderId
          required: true
          type: string
        - description: JSON payload containing modifications
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.CoverModifyOrderRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Response indicating successful modification
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Bad request or invalid input
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "404":
          description: Order not found
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Modify cover order
      tags:
        - Order
  "/trading/orders/cover/{orderId}/sl":
    put:
      consumes:
        - application/json
      description: Modifies the stop-loss of a pending cover order
      parameters:
        - description: ID of the order to be modified
          in: path
          name: orderId
          required: true
          type: string
        - description: JSON payload containing modifications
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.CoverModifySlOrderRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Response indicating successful modification
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Bad request or invalid input
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "404":
          description: Order not found
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Modify cover order stop-loss
      tags:
        - Order
  /trading/orders/gtd:
    get:
      consumes:
        - application/json
      description: Retrieves the trade book including completed trades
      operationId: GetGtdOrderBook
      parameters:
        - description: Etag value to check for modifications
          in: header
          name: If-None-Match
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with trade book details. The response body is a
            JSON object containing trade book information.
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get trade book
      tags:
        - Order
  /trading/orders/gtt:
    get:
      description: Retrieves the Gtt (Good Till Trigger) order book, including active,
        triggered, and cancelled orders
      operationId: GetGttOrderBook
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with Gtt order book details
          schema:
            $ref: "#/definitions/types.GttOrderbookResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get Gtt order book
      tags:
        - Order
    post:
      description: Places a Gtt (Good Till Trigger) order with specified parameters
      operationId: CreateGttOrder
      parameters:
        - description: Gtt order payload
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.PlaceGttRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with order details
          schema:
            $ref: "#/definitions/types.PlaceOrderResponse"
        "400":
          description: Bad request. Please esnure that all prices and quantities are
            included appropriately according to the specified variety.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Create Gtt order
      tags:
        - Order
  "/trading/orders/gtt/{id}":
    delete:
      description: Deletes a Gtt (Good Till Trigger) order with specified id
      operationId: DeleteGttOrder
      parameters:
        - description: UUID of the GTT order to be deleted
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with order details
          schema:
            $ref: "#/definitions/types.PlaceOrderResponse"
        "400":
          description: Bad request. Please ensure correct GTT details have been used.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Delete Gtt order
      tags:
        - Order
  "/trading/orders/gtt/{uuid}":
    put:
      consumes:
        - application/json
      description: Modifies a Gtt (Good Till Trigger) order with specified parameters
      operationId: ModifyGttOrder
      parameters:
        - description: UUID of the GTT order to be modified
          in: path
          name: uuid
          required: true
          type: string
        - description: Gtt order modification payload
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.ModifyGttRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with order details
          schema:
            items:
              $ref: "#/definitions/types.PlaceOrderResponse"
            type: array
        "400":
          description: Bad request. Please ensure that all prices and quantities are
            included appropriately according to the specified variety.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Modify Gtt order
      tags:
        - Order
  "/trading/orders/gtt/{uuid}/tags":
    put:
      description: Updates the tags of a Gtt (Good Till Trigger) order with specified
        parameters
      operationId: UpdateGttOrderTags
      parameters:
        - description: UUID of the GTT order to be modified
          in: path
          name: uuid
          required: true
          type: string
        - description: Gtt order tag update payload
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/controllers.UpdateTagsRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with order details
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Bad request. Please ensure that all prices and quantities are
            included appropriately according to the specified variety.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "404":
          description: Order not found
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Update Gtt order tags
      tags:
        - Order
  /trading/orders/iceberg:
    post:
      consumes:
        - application/json
      description: Places an iceberg order with multiple legs
      operationId: PlaceIcebergOrder
      parameters:
        - description: JSON payload containing order details
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.IcebergPlaceOrderRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with order details
          schema:
            $ref: "#/definitions/types.IcebergOrderResponse"
        "400":
          description: Bad request or invalid input. The iceberg order should contain a
            minimum of 2 legs and allows a mazimum of 10 legs. Also market
            orders are not allowed and only day orders are allowed.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Place iceberg order
      tags:
        - Order
  "/trading/orders/iceberg/{orderId}":
    delete:
      consumes:
        - application/json
      description: Cancels a pending iceberg order
      operationId: CancelIcebergOrder
      parameters:
        - description: Order ID of the iceberg order to be cancelled
          in: path
          name: orderId
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Bad request or invalid input.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Cancel iceberg order
      tags:
        - Order
    put:
      consumes:
        - application/json
      description: Modifies the parameters of a pending iceberg order
      operationId: ModifyIcebergOrder
      parameters:
        - description: Order ID of the iceberg order to be modified
          in: path
          name: orderId
          required: true
          type: string
        - description: JSON payload containing modifications
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.ModifyIcebergOrder"
      produces:
        - application/json
      responses:
        "200":
          description: Order modified successfully
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Bad request or invalid input.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Modify iceberg order
      tags:
        - Order
  /trading/orders/regular:
    post:
      consumes:
        - application/json
      description: Creates and places a regular order
      operationId: CreateRegularOrder
      parameters:
        - description: Regular order request payload
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.RegularPlaceOrderRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: "#/definitions/types.PlaceOrderResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Create a regular order
      tags:
        - Order
  "/trading/orders/regular/{orderId}":
    delete:
      consumes:
        - application/json
      description: Cancels a regular order
      operationId: CancelRegularOrder
      parameters:
        - description: Order Id of order that is to be modified
          in: path
          name: orderId
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            $ref: "#/definitions/controllers.CustomResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "404":
          description: Status not found
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Cancel a regular order
      tags:
        - Order
    put:
      consumes:
        - application/json
      description: Modifies and places a regular order
      operationId: ModifyRegularOrder
      parameters:
        - description: Order Id of order that is to be modified
          in: path
          name: orderId
          required: true
          type: string
        - description: Modify regular order request payload
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.ModifyRegularOrderRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: "#/definitions/types.PlaceOrderResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Modify a regular order
      tags:
        - Order
  /trading/orders/regular/multi_delete:
    post:
      consumes:
        - application/json
      description: Cancels multiple orders
      operationId: CancelMultipleRegularOrders
      parameters:
        - description: Order Ids for orders to be cancelled
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.CancelAllRegularOrdersRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Response will contain a status of all the provided orders including
            if they were successfully cancelled.
          schema:
            $ref: "#/definitions/types.MultipleOrderResponse"
        "400":
          description: Bad request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Cancel multiple orders
      tags:
        - Order
  /trading/portfolio/holdings:
    get:
      description: Retrieves holdings for the trading portfolio
      operationId: GetHoldings
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with holdings details
          schema:
            $ref: "#/definitions/types.HoldingsResponse"
        "400":
          description: Bad request.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get Holdings
      tags:
        - Portfolio
  /trading/portfolio/positions:
    get:
      description: Retrieves net positions for the trading portfolio
      operationId: GetNetPositions
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with position details
          schema:
            $ref: "#/definitions/types.PositionResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get Net Positions
      tags:
        - Portfolio
    put:
      description: Converts a position in the trading portfolio
      operationId: ConvertPosition
      parameters:
        - description: Position conversion payload
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/types.ConvertPositionRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with position details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request. Please ensure all required fields are provided.
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Convert Position
      tags:
        - Portfolio
  /trading/trades:
    get:
      consumes:
        - application/json
      description: Retrieves the trade book including completed trades
      operationId: GetTradeBook
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with trade book details
          schema:
            $ref: "#/definitions/types.TradeBookResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get trade book
      tags:
        - Order
  /trading/user/funds:
    get:
      description: Retrieves funds information for the trading portfolio
      operationId: GetFunds
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with funds details
          schema:
            $ref: "#/definitions/types.FundResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get Funds
      tags:
        - Funds
  /trading/user/funds/withdrawal:
    get:
      description: Retrieves a list of fund withdrawals for the trading portfolio
      operationId: GetWithdrawalsList
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with fund withdrawal details
          schema:
            $ref: "#/definitions/types.FundWithdrawalListResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: List Withdrawals
      tags:
        - Funds
    post:
      consumes:
        - application/json
      description: Initiates a fund withdrawal request for the trading portfolio
      operationId: WithdrawFunds
      parameters:
        - description: Withdrawal request payload
          in: body
          name: payload
          required: true
          schema:
            $ref: "#/definitions/types.FundWithdrawalRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with fund withdrawal details
          schema:
            $ref: "#/definitions/types.FundWithdrawalResponse"
        "400":
          description: Invalid request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Withdraw Funds
      tags:
        - Funds
    put:
      consumes:
        - application/json
      description: Cancels a previously initiated fund withdrawal request for the
        trading portfolio
      operationId: CancelFundWithdrawal
      parameters:
        - description: Cancellation request payload
          in: body
          name: payload
          required: true
          schema:
            $ref: "#/definitions/types.FundWithdrawalCancelRequest"
      produces:
        - application/json
      responses:
        "200":
          description: Successful response indicating the cancellation of fund withdrawal
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Cancel Fund Withdrawal
      tags:
        - Funds
  /trading/user/profile:
    get:
      description: Retrieves user profile details
      operationId: GetUserProfile
      produces:
        - application/json
      responses:
        "200":
          description: Successful response with user's profile details.
          schema:
            $ref: "#/definitions/controllers.UserProfileResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: Get user profile
      tags:
        - Profile
  /user/login:
    post:
      consumes:
        - application/json
      description: This endpoint is used to login the user
      parameters:
        - description: User login request payload
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/controllers.UserLoginRequest"
        - description: Your x-api Key
          in: header
          name: x-api-key
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: User logged in successfully with given user details
          schema:
            $ref: "#/definitions/controllers.UserLoginResponse"
        "401":
          description: Unauthorized to access this application
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
        "500":
          description: Internal server error
          schema:
            $ref: "#/definitions/controllers.ErrorResponse"
      summary: User Login
      tags:
        - Login
schemes:
  - https
security:
  - Bearer: []
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
